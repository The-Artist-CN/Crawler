"""

XPath（XML Path Language）是一种查询 XML 或 HTML 文档的语言，用于选择节点或节点集。以下是 XPath 的常用命令及其详细解释：

---

### **1. 基础选择器**

| 表达式              | 功能                                      | 示例                                |
|---------------------|-------------------------------------------|-------------------------------------|
| `/`                 | 从根节点选取                              | `/html`                            |
| `//`                | 从文档中的任意位置选取节点（不限定层级）  | `//div`                            |
| `.`                 | 当前节点                                  | `.`                                |
| `..`                | 父节点                                    | `..`                               |
| `@`                 | 属性                                      | `@class`                           |

---

### **2. 节点名称**
| 表达式              | 功能                                      | 示例                                |
|---------------------|-------------------------------------------|-------------------------------------|
| `tag_name`          | 匹配特定标签                              | `//div`                            |
| `*`                 | 匹配任何元素                              | `//*`                              |
| `@attribute_name`   | 匹配特定属性                              | `//a[@href]`                       |

---

### **3. 谓词（过滤条件）**
谓词通过方括号 `[]` 限制选取的范围，支持逻辑运算和函数。

| 表达式                      | 功能                                  | 示例                                            |
|-----------------------------|---------------------------------------|------------------------------------------------|
| `[n]`                       | 选取第 n 个子节点（从 1 开始）       | `//li[1]`                                     |
| `[last()]`                  | 选取最后一个节点                     | `//li[last()]`                                |
| `[position() < n]`          | 选取前 n-1 个节点                   | `//li[position() < 3]`                        |
| `[@attr='value']`           | 匹配属性值等于 `value` 的节点         | `//a[@href='https://example.com']`            |
| `[contains(@attr, 'value')]`| 匹配属性中包含 `value` 的节点         | `//div[contains(@class, 'header')]`           |
| `[text()='text']`           | 匹配节点文本等于 `text` 的节点        | `//p[text()='Hello World']`                   |
| `[starts-with(@attr, 'val')]`| 匹配属性以 `val` 开头的节点          | `//input[starts-with(@name, 'user')]`         |
| `[not(@attr)]`              | 匹配没有指定属性的节点                | `//img[not(@alt)]`                            |

---

### **4. 函数**
XPath 提供了一些常用函数来处理节点、文本和属性。

| 函数                              | 功能                                                                                       | 示例                              |
|-----------------------------------|------------------------------------------------------------------------------------------|-----------------------------------|
| `text()`                          | 获取节点文本                                                                               | `//p/text()`                     |
| `contains(string, substring)`     | 判断 `string` 是否包含 `substring`                                                        | `//a[contains(text(), 'Login')]` |
| `starts-with(string, substring)`  | 判断 `string` 是否以 `substring` 开头                                                     | `//p[starts-with(text(), 'Hi')]` |
| `normalize-space(string)`         | 移除字符串中的前后和多余空格                                                              | `//p[normalize-space()='Hello']` |
| `last()`                          | 选取最后一个节点                                                                          | `//li[last()]`                   |
| `position()`                      | 返回当前节点的位置（索引从 1 开始）                                                       | `//li[position()=2]`             |
| `count(node-set)`                 | 返回节点集合的数量                                                                        | `count(//div)`                   |

---

### **5. 逻辑运算符**
可以结合多个条件筛选节点。

| 运算符         | 功能                              | 示例                                                   |
|----------------|-----------------------------------|--------------------------------------------------------|
| `and`          | 逻辑与                           | `//a[@class='link' and @href='/home']`                |
| `or`           | 逻辑或                           | `//a[@class='link' or @href='/home']`                 |
| `not()`        | 逻辑非                           | `//input[not(@type='hidden')]`                        |
| `=`            | 等于                             | `//a[@href='/home']`                                  |
| `!=`           | 不等于                           | `//a[@href!='/home']`                                 |
| `<` 或 `>`     | 小于 / 大于                      | `//li[position() < 3]`                                |

---

### **6. 轴选择（Axes）**
轴用于选取与当前节点有特定关系的节点。

| 表达式                | 功能                                               | 示例                                |
|-----------------------|----------------------------------------------------|-------------------------------------|
| `ancestor::*`         | 当前节点的所有祖先节点（包括根节点）               | `//div/ancestor::*`                |
| `ancestor-or-self::*` | 当前节点及其祖先节点                               | `//div/ancestor-or-self::*`        |
| `child::*`            | 当前节点的所有直接子节点                           | `//ul/child::li`                   |
| `descendant::*`       | 当前节点的所有子孙节点                             | `//div/descendant::p`              |
| `descendant-or-self::*`| 当前节点及其子孙节点                              | `//div/descendant-or-self::*`      |
| `following::*`        | 当前节点之后的所有节点（不包括当前节点的子节点）   | `//h2/following::*`                |
| `following-sibling::*`| 当前节点之后的兄弟节点                             | `//li/following-sibling::*`        |
| `preceding::*`        | 当前节点之前的所有节点                             | `//h2/preceding::*`                |
| `preceding-sibling::*`| 当前节点之前的兄弟节点                             | `//li/preceding-sibling::*`        |
| `parent::*`           | 当前节点的父节点                                   | `//span/parent::*`                 |
| `self::*`             | 当前节点本身                                       | `//div/self::*`                    |

---

### **7. 综合示例**
#### 1. 选取所有带有 `class="item"` 的 `<div>`：
```xpath
//div[@class='item']
```

#### 2. 选取 `<ul>` 的第一个 `<li>`：
```xpath
//ul/li[1]
```

#### 3. 选取所有 `<img>`，且没有 `alt` 属性：
```xpath
//img[not(@alt)]
```

#### 4. 选取所有 `<a>` 元素，其 `href` 属性包含 `example`：
```xpath
//a[contains(@href, 'example')]
```

#### 5. 选取最后一个带有 `class="nav"` 的 `<div>`：
```xpath
//div[@class='nav'][last()]
```

#### 6. 获取所有 `<p>` 的文本内容：
```xpath
//p/text()
```



"""
"""
                          if __name__ == '__main__':
确保某些代码仅在直接运行脚本时执行,而在脚本被导入为模块时不会执行, 通常用于包含测试代码或脚本的入口点
"""


if __name__ == '__main__':
    pass